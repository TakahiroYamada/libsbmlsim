--- simulate_explicit.c	2012-02-26 17:54:17.000000000 +0900
+++ simulate_implicit.c	2012-02-26 17:54:36.000000000 +0900
@@ -9,25 +9,29 @@
 #include <float.h>
 #include "header.h"
 
-//coefficient matrix for Adams Bashforth
-double c_e[4][4] = {{1.0, 0, 0, 0}, //AB1 (eular) : order = 0
-		  {3.0/2.0, -1.0/2.0, 0, 0}, //AB2 : order = 1
-		  {23.0/12.0, -16.0/12.0, 5.0/12.0, 0}, //AB3 : order = 2
-		  {55.0/24.0, -59.0/24.0, 37.0/24.0, -9.0/24.0}}; //AB4 : order = 3
-
-double calc_explicit_formula(int order, double k1, double k2, double k3, double k4){
-  return c_e[order][0]*k1 + c_e[order][1]*k2 + c_e[order][2]*k3 + c_e[order][3]*k4;
+//coefficient matrix for implicit numerical integration
+int c_i[7][9] = {{1, -1, 0, 0, 0, -1, 0, 0, 0}, //AM1 & AM2 (Backword-Eular) : orcer = 0
+	       {2, -2, 0, 0, 0, -1, -1, 0, 0}, //AM2 (Crank-Nicolson) : order = 1
+	       {12, -12, 0, 0, 0, -5, -8, 1, 0}, //AM3 : order = 2
+	       {24, -24, 0, 0, 0, -9, -19, 5, -1}, //AM4 : order = 3
+	       {3, -4, 1, 0, 0, -2, 0, 0, 0}, //BD2 : order = 4
+	       {11, -18, 9, -2, 0, -6, 0, 0, 0}, //BD3 : order = 5
+	       {25, -48, 36, -16, 3, -12, 0, 0, 0}}; //BD4 : order = 6
+
+//x1 = x(t+1), x2 = x(t) x3 = x(t-1), x4 = x(t-2), x5 = x(t-3)
+//k1 = dx(t+1)/d(t+1), k2 = dx(t)/dt, k3 = dx(t-1)/d(t-1), k4 = dx(t-2)/d(t-2)
+double calc_implicit_formula(int order, double x1, double x2, double x3, double x4, double x5, double k1, double k2, double k3, double k4, double dt){
+  return c_i[order][0]*x1 + c_i[order][1]*x2 + c_i[order][2]*x3 + c_i[order][3]*x4 + c_i[order][4]*x5 + dt*(c_i[order][5]*k1 + c_i[order][6]*k2 + c_i[order][7]*k3 + c_i[order][8]*k4);
 }
 
-void seed_set_ex(){
+void seed_set_imp(){
   srand((unsigned)time(NULL));
 }
 
-void simulate_explicit(Model_t *m, mySpecies *sp[], myParameter *param[], myCompartment *comp[], myReaction *re[], myRule *rule[], myEvent *event[], myInitialAssignment *initAssign[], myAlgebraicEquations *algEq, timeVariantAssignments *timeVarAssign, double sim_time, double dt, int print_interval, double *time, int order, int print_amount, allocated_memory *mem){
-  seed_set_ex();
+void simulate_implicit(Model_t *m, mySpecies *sp[], myParameter *param[], myCompartment *comp[], myReaction *re[], myRule *rule[], myEvent *event[], myInitialAssignment *initAssign[], myAlgebraicEquations *algEq, timeVariantAssignments *timeVarAssign, double sim_time, double dt, int print_interval, double *time, int order, int use_lazy_method, int print_amount, allocated_memory *mem){
+  seed_set_imp();
   int i, j, cycle;
   double reverse_time;
-  int error;
   int end_cycle = sim_time/dt;
   int num_of_species = Model_getNumSpecies(m);
   int num_of_parameters = Model_getNumParameters(m);
@@ -59,6 +63,26 @@
 
   create_calc_object_list(num_of_species, num_of_parameters, num_of_compartments, num_of_reactions, num_of_all_var_species, num_of_all_var_parameters, num_of_all_var_compartments, num_of_all_var_species_reference, num_of_var_species, num_of_var_parameters, num_of_var_compartments, num_of_var_species_reference, all_var_sp, all_var_param, all_var_comp, all_var_spr, var_sp, var_param, var_comp, var_spr, sp, param, comp, re);
 
+  double **jacobian;
+  jacobian = (double**)malloc(sizeof(double*)*(num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference));
+  for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+    jacobian[i] = (double*)malloc(sizeof(double)*(num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference));
+  }
+  
+  double b[num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference];
+  double pre_b[num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference];
+  int is_convergence = 0;
+  int p[num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference]; //for pivot selection
+  int flag;
+  double delta = 1.0e-8; //
+  double tolerance = 1.0e-4; //error tolerance of neuton method
+  int loop;
+  double delta_value[num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference];
+  int error;
+  
+  double k_next; //speculated k value : k(t+1)
+  double k_t[num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference]; //k(t)
+
   double **coefficient_matrix = NULL;
   double *constant_vector = NULL;
   int *alg_pivot = NULL;
@@ -124,7 +148,7 @@
   //initialize delay_val
   initialize_delay_val(sp, num_of_species, param, num_of_parameters, comp, num_of_compartments, re, num_of_reactions, sim_time, dt, 0);
   
-  //calc InitialAssignment
+  //calc InitialAssignmet
   calc_initial_assignment(initAssign, num_of_initialAssignments, dt, cycle, &reverse_time);
 
   //initialize delay_val
@@ -199,12 +223,10 @@
       for(i=0; i<algEq->num_of_algebraic_variables; i++){
 	for(j=0; j<algEq->num_of_algebraic_variables; j++){
 	  coefficient_matrix[i][j] = calc(algEq->coefficient_matrix[i][j], dt, cycle, &reverse_time, 0);
-	  //printf("coefficient matrix[%d][%d] = %lf\n", i, j, coefficient_matrix[i][j]);
 	}
       }
       for(i=0; i<algEq->num_of_algebraic_variables; i++){
 	constant_vector[i] = -calc(algEq->constant_vector[i], dt, cycle, &reverse_time, 0);
-	//printf("constant vector[%d] = %lf\n", i, constant_vector[i]);
       }
       //LU decompostion
       error = lu_decomposition(coefficient_matrix, alg_pivot, algEq->num_of_algebraic_variables);
@@ -213,9 +235,6 @@
       }
       //forward substitution & backward substitution
       lu_solve(coefficient_matrix, alg_pivot, algEq->num_of_algebraic_variables, constant_vector);
-/*       for(i=0; i<algEq->num_of_algebraic_variables; i++){ */
-/* 	printf("ans[%d] = %lf\n", i, constant_vector[i]); */
-/*       } */
       for(i=0; i<algEq->num_of_alg_target_sp; i++){
 	algEq->alg_target_species[i]->target_species->temp_value = constant_vector[algEq->alg_target_species[i]->order];
       }
@@ -352,9 +371,10 @@
       }
       fprintf(fp3, "\n");
     }
-    //print result
+
+/*     //print result */
 /*     if(cycle%print_interval == 0){ */
-/*       fprintf(fp1, "%.16g", *time); */
+/*       fprintf(fp1, "%g", *time); */
 /*       for(i=0; i<num_of_species; i++){ */
 /* 	if(print_amount){ */
 /* 	  if(sp[i]->is_concentration){ */
@@ -379,28 +399,149 @@
 /*       fprintf(fp1, "\n"); */
 /*     } */
 
-    //time increase
+    //time increse
     *time = (cycle+1)*dt;
     
-    if(order == 4){//runge kutta      
-      calc_k(all_var_sp, num_of_all_var_species, all_var_param, num_of_all_var_parameters, all_var_comp, num_of_all_var_compartments, all_var_spr, num_of_all_var_species_reference, re, num_of_reactions, rule, num_of_rules, cycle, dt, &reverse_time, 1, 1);
-      calc_temp_value(all_var_sp, num_of_all_var_species, all_var_param, num_of_all_var_parameters, all_var_comp, num_of_all_var_compartments, all_var_spr, num_of_all_var_species_reference, cycle, dt, 1);      
-    }else{//Adams-Bashforth
-      //calc k
-      calc_k(var_sp, num_of_var_species, var_param, num_of_var_parameters, var_comp, num_of_var_compartments, var_spr, num_of_var_species_reference, re, num_of_reactions, rule, num_of_rules, cycle, dt, &reverse_time, 0, 1);      
-      //calc temp value by Adams Bashforth
+    //implicit method
+    //define init value by eular start
+    calc_k(all_var_sp, num_of_all_var_species, all_var_param, num_of_all_var_parameters, all_var_comp, num_of_all_var_compartments, all_var_spr, num_of_all_var_species_reference, re, num_of_reactions, rule, num_of_rules, cycle, dt, &reverse_time, 0, 1);
+    
+    //preserve k(t) value
+    for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+      if(i < num_of_var_species){
+	k_t[i] = var_sp[i]->k[0];
+      }else if(i < num_of_var_species+num_of_var_parameters){
+	k_t[i] = var_param[i-num_of_var_species]->k[0];
+      }else if(i < num_of_var_species+num_of_var_parameters+num_of_var_compartments){
+	k_t[i] = var_comp[i-num_of_var_species-num_of_var_parameters]->k[0];
+      }else{
+	k_t[i] = var_spr[i-num_of_var_species-num_of_var_parameters-num_of_var_compartments]->k[0];
+      }
+    }
+    
+    calc_temp_value(all_var_sp, num_of_all_var_species, all_var_param, num_of_all_var_parameters, all_var_comp, num_of_all_var_compartments, all_var_spr, num_of_all_var_species_reference, cycle, dt, 0);
+    //define init value by eular end
+
+    //newton method
+    if(use_lazy_method){
+      is_convergence = 0;
+      for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	pre_b[i] = 0;
+      }
+    }
+    flag = 1;
+    while(flag){
+      //calc b
+      calc_k(var_sp, num_of_var_species, var_param, num_of_var_parameters, var_comp, num_of_var_compartments, var_spr, num_of_var_species_reference, re, num_of_reactions, rule, num_of_rules, cycle, dt, &reverse_time, 0, 0);
+      for(i=0; i<num_of_var_species; i++){
+	k_next = var_sp[i]->k[0];
+	b[i] = calc_implicit_formula(order, var_sp[i]->temp_value, var_sp[i]->value, var_sp[i]->prev_val[0], var_sp[i]->prev_val[1], var_sp[i]->prev_val[2], k_next, k_t[i], var_sp[i]->prev_k[0], var_sp[i]->prev_k[1], dt);
+      }
+      for(i=0; i<num_of_var_parameters; i++){
+	b[num_of_var_species+i] = calc_implicit_formula(order, var_param[i]->temp_value, var_param[i]->value, var_param[i]->prev_val[0], var_param[i]->prev_val[1], var_param[i]->prev_val[2], var_param[i]->k[0], k_t[num_of_var_species+i], var_param[i]->prev_k[0], var_param[i]->prev_k[1], dt);
+      }
+      for(i=0; i<num_of_var_compartments; i++){
+	b[num_of_var_species+num_of_var_parameters+i] = calc_implicit_formula(order, var_comp[i]->temp_value, var_comp[i]->value, var_comp[i]->prev_val[0], var_comp[i]->prev_val[1], var_comp[i]->prev_val[2], var_comp[i]->k[0], k_t[num_of_var_species+num_of_var_parameters+i], var_comp[i]->prev_k[0], var_comp[i]->prev_k[1], dt);
+      }
+      for(i=0; i<num_of_var_species_reference; i++){
+	b[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i] = calc_implicit_formula(order, var_spr[i]->temp_value, var_spr[i]->value, var_spr[i]->prev_val[0], var_spr[i]->prev_val[1], var_spr[i]->prev_val[2], var_spr[i]->k[0], k_t[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i], var_spr[i]->prev_k[0], var_spr[i]->prev_k[1], dt);
+      }
+
+      if(!use_lazy_method || !is_convergence){
+	//calc jacobian by numerical differentiation
+	for(loop=0; loop<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; loop++){
+	  if(loop < num_of_var_species){
+	    var_sp[loop]->temp_value += delta;
+	  }else if(loop < num_of_var_species+num_of_var_parameters){
+	    var_param[loop-num_of_var_species]->temp_value += delta;
+	  }else if(loop < num_of_var_species+num_of_var_parameters+num_of_var_compartments){
+	    var_comp[loop-num_of_var_species-num_of_var_parameters]->temp_value += delta;
+	  }else{
+	    var_spr[loop-num_of_var_species-num_of_var_parameters-num_of_var_compartments]->temp_value += delta;
+	  }
+	  calc_k(var_sp, num_of_var_species, var_param, num_of_var_parameters, var_comp, num_of_var_compartments, var_spr, num_of_var_species_reference, re, num_of_reactions, rule, num_of_rules, cycle, dt, &reverse_time, 0, 0);
       for(i=0; i<num_of_var_species; i++){
-	var_sp[i]->temp_value = var_sp[i]->value + calc_explicit_formula(order, var_sp[i]->k[0], var_sp[i]->prev_k[0], var_sp[i]->prev_k[1], var_sp[i]->prev_k[2])*dt;
+	    k_next = var_sp[i]->k[0];
+	    delta_value[i] = calc_implicit_formula(order, var_sp[i]->temp_value, var_sp[i]->value, var_sp[i]->prev_val[0], var_sp[i]->prev_val[1], var_sp[i]->prev_val[2], k_next, k_t[i], var_sp[i]->prev_k[0], var_sp[i]->prev_k[1], dt);
+	    //numerical differentiation
+	    jacobian[i][loop] = (delta_value[i]-b[i])/delta;
       }
       for(i=0; i<num_of_var_parameters; i++){
-	var_param[i]->temp_value = var_param[i]->value + calc_explicit_formula(order, var_param[i]->k[0], var_param[i]->prev_k[0], var_param[i]->prev_k[1], var_param[i]->prev_k[2])*dt;
+	    delta_value[num_of_var_species+i] = calc_implicit_formula(order, var_param[i]->temp_value, var_param[i]->value, var_param[i]->prev_val[0], var_param[i]->prev_val[1], var_param[i]->prev_val[2], var_param[i]->k[0], k_t[num_of_var_species+i], var_param[i]->prev_k[0], var_param[i]->prev_k[1], dt);
+	    //numerical differentiation
+	    jacobian[num_of_var_species+i][loop] = (delta_value[num_of_var_species+i]-b[num_of_var_species+i])/delta;
       }
       for(i=0; i<num_of_var_compartments; i++){
-	var_comp[i]->temp_value = var_comp[i]->value + calc_explicit_formula(order, var_comp[i]->k[0], var_comp[i]->prev_k[0], var_comp[i]->prev_k[1], var_comp[i]->prev_k[2])*dt;
+	    delta_value[num_of_var_species+num_of_var_parameters+i] = calc_implicit_formula(order, var_comp[i]->temp_value, var_comp[i]->value, var_comp[i]->prev_val[0], var_comp[i]->prev_val[1], var_comp[i]->prev_val[2], var_comp[i]->k[0], k_t[num_of_var_species+num_of_var_parameters+i], var_comp[i]->prev_k[0], var_comp[i]->prev_k[1], dt);
+	    //numerical differentiation
+	    jacobian[num_of_var_species+num_of_var_parameters+i][loop] = (delta_value[num_of_var_species+num_of_var_parameters+i]-b[num_of_var_species+num_of_var_parameters+i])/delta;
       }
       for(i=0; i<num_of_var_species_reference; i++){
-	var_spr[i]->temp_value = var_spr[i]->value + calc_explicit_formula(order, var_spr[i]->k[0], var_spr[i]->prev_k[0], var_spr[i]->prev_k[1], var_spr[i]->prev_k[2])*dt;
+	    delta_value[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i] = calc_implicit_formula(order, var_spr[i]->temp_value, var_spr[i]->value, var_spr[i]->prev_val[0], var_spr[i]->prev_val[1], var_spr[i]->prev_val[2], var_spr[i]->k[0], k_t[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i], var_spr[i]->prev_k[0], var_spr[i]->prev_k[1], dt);
+	    //numerical differentiation
+	    jacobian[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i][loop] = (delta_value[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i]-b[num_of_var_species+num_of_var_parameters+num_of_var_compartments+i])/delta;
+	  }
+	  if(loop < num_of_var_species){
+	    var_sp[loop]->temp_value -= delta;
+	  }else if(loop < num_of_var_species+num_of_var_parameters){
+	    var_param[loop-num_of_var_species]->temp_value -= delta;
+	  }else if(loop < num_of_var_species+num_of_var_parameters+num_of_var_compartments){
+	    var_comp[loop-num_of_var_species-num_of_var_parameters]->temp_value -= delta;
+	  }else{
+	    var_spr[loop-num_of_var_species-num_of_var_parameters-num_of_var_compartments]->temp_value -= delta;
+	  }
+	}
+      }
+
+      //initialize p
+      for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	p[i] = i;
+      }
+
+      //LU decomposition
+      error = lu_decomposition(jacobian, p, num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference);
+      if(error == 0){//failure in LU decomposition
+	return;
+      }
+
+      //forward substitution & backward substitution
+      lu_solve(jacobian, p, num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference, b);
+
+      //calculate next temp value
+      for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	if(i < num_of_var_species){
+	  var_sp[i]->temp_value -= b[i];
+	}else if(i < num_of_var_species+num_of_var_parameters){
+	  var_param[i-num_of_var_species]->temp_value -= b[i];
+	}else if(i < num_of_var_species+num_of_var_parameters+num_of_var_compartments){
+	  var_comp[i-num_of_var_species-num_of_var_parameters]->temp_value -= b[i];
+	}else{
+	  var_spr[i-num_of_var_species-num_of_var_parameters-num_of_var_compartments]->temp_value -= b[i];
       }      
+      }
+      
+      //convergence judgement
+      if(use_lazy_method){
+	is_convergence = 1;
+	for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	  if(fabs(b[i]) > fabs(pre_b[i])){
+	    is_convergence = 0;
+	  }
+	}
+	for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	  pre_b[i] = b[i];
+	}
+      }
+      
+      //error judgement
+      flag = 0;
+      for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+	if(fabs(b[i]) > tolerance){
+	  flag = 1;
+	}
+      }
+    }
+    
       //calc temp value by assignment
       for(i=0; i<num_of_all_var_species; i++){
 	if(all_var_sp[i]->depending_rule != NULL && all_var_sp[i]->depending_rule->is_assignment){
@@ -422,7 +563,6 @@
 	  all_var_spr[i]->temp_value = calc(all_var_spr[i]->depending_rule->eq, dt, cycle, &reverse_time, 0);
 	}
       }
-    }
 
     //calc independent species value
     for(i=0; i<num_of_species; i++){
@@ -477,14 +617,14 @@
       }
     }
     
-    //preserve prev_value and prev_k
+    //preserve prev_value and prev_k for multistep solution
     for(i=0; i<num_of_var_species; i++){
       var_sp[i]->prev_val[2] = var_sp[i]->prev_val[1];
       var_sp[i]->prev_val[1] = var_sp[i]->prev_val[0];
       var_sp[i]->prev_val[0] = var_sp[i]->value;
       var_sp[i]->prev_k[2] = var_sp[i]->prev_k[1];
       var_sp[i]->prev_k[1] = var_sp[i]->prev_k[0];
-      var_sp[i]->prev_k[0] = var_sp[i]->k[0];
+      var_sp[i]->prev_k[0] = k_t[i];
     }
     for(i=0; i<num_of_var_parameters; i++){
       var_param[i]->prev_val[2] = var_param[i]->prev_val[1];
@@ -492,7 +632,7 @@
       var_param[i]->prev_val[0] = var_param[i]->value;
       var_param[i]->prev_k[2] = var_param[i]->prev_k[1];
       var_param[i]->prev_k[1] = var_param[i]->prev_k[0];
-      var_param[i]->prev_k[0] = var_param[i]->k[0];
+      var_param[i]->prev_k[0] = k_t[num_of_var_species+i];
     }
     for(i=0; i<num_of_var_compartments; i++){
       var_comp[i]->prev_val[2] = var_comp[i]->prev_val[1];
@@ -500,7 +640,7 @@
       var_comp[i]->prev_val[0] = var_comp[i]->value;
       var_comp[i]->prev_k[2] = var_comp[i]->prev_k[1];
       var_comp[i]->prev_k[1] = var_comp[i]->prev_k[0];
-      var_comp[i]->prev_k[0] = var_comp[i]->k[0];
+      var_comp[i]->prev_k[0] = k_t[num_of_var_species+num_of_var_parameters+i];
     }
     for(i=0; i<num_of_var_species_reference; i++){
       var_spr[i]->prev_val[2] = var_spr[i]->prev_val[1];
@@ -508,7 +648,7 @@
       var_spr[i]->prev_val[0] = var_spr[i]->value;
       var_spr[i]->prev_k[2] = var_spr[i]->prev_k[1];
       var_spr[i]->prev_k[1] = var_spr[i]->prev_k[0];
-      var_spr[i]->prev_k[0] = var_spr[i]->k[0];
+      var_spr[i]->prev_k[0] = k_t[num_of_var_species+num_of_var_parameters+i];
     }
     
     //forwarding value
@@ -526,4 +666,9 @@
     free(constant_vector);
     free(alg_pivot);
   }
+  for(i=0; i<num_of_var_species+num_of_var_parameters+num_of_var_compartments+num_of_var_species_reference; i++){
+    free(jacobian[i]);
+  }
+  free(jacobian);
+  
 }
