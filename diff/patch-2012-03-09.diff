diff -ruBb SBML_simulator_1203/src/calc_event.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_event.c
--- SBML_simulator_1203/src/calc_event.c	2011-12-03 21:26:42.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_event.c	2012-03-05 23:37:59.000000000 +0900
@@ -129,9 +129,9 @@
   //initialize
   for(i=0; i<num_of_events; i++){
     for(j=0; j<Event_getNumEventAssignments(event[i]->origin); j++){
-      if(event[i]->assignments[j]->target_species != NULL){
-	event[i]->assignments[j]->target_species->depending_event_is_fired = 0;
-      }
+/*       if(event[i]->assignments[j]->target_species != NULL){ */
+/* 	event[i]->assignments[j]->target_species->depending_event_is_fired = 0; */
+/*       } */
     }
   }
   if(cycle == 0){
@@ -154,7 +154,7 @@
 	  //printf("value used in assignment is %lf(%p)\n", assignment_values_from_trigger_time[0][i], &assignment_values_from_trigger_time[0][i]);
 	  if(assignment->target_species != NULL){
 	    assignment->target_species->value = assignment_values_from_trigger_time[0][i];
-	    assignment->target_species->depending_event_is_fired = 1;
+	    //assignment->target_species->depending_event_is_fired = 1;
 	  }else if(assignment->target_parameter != NULL){
 	    assignment->target_parameter->value = assignment_values_from_trigger_time[0][i];
 	  }else if(assignment->target_compartment != NULL){
@@ -168,7 +168,7 @@
 	  assignment = event_buf[0]->assignments[i];
 	  if(assignment->target_species != NULL){
 	    assignment->target_species->value = calc(assignment->eq, dt, cycle, reverse_time, 0);
-	    assignment->target_species->depending_event_is_fired = 1;
+	    //assignment->target_species->depending_event_is_fired = 1;
 	  }else if(assignment->target_parameter != NULL){
 	    assignment->target_parameter->value = calc(assignment->eq, dt, cycle, reverse_time, 0);
 	  }else if(assignment->target_compartment != NULL){
@@ -183,12 +183,20 @@
 	assignment = event_buf[0]->assignments[i];
 	if(assignment->target_species != NULL){
 	  assignment->target_species->temp_value = assignment->target_species->value;
-	  if(assignment->target_species->is_concentration && assignment->target_species->is_independent){
-	    assignment->target_species->initial_amount = assignment->target_species->value*assignment->target_species->locating_compartment->value;
-	  }
+/* 	  if(assignment->target_species->is_concentration && assignment->target_species->is_independent){ */
+/* 	    assignment->target_species->initial_amount = assignment->target_species->value*assignment->target_species->locating_compartment->value; */
+/* 	  } */
 	}else if(assignment->target_parameter != NULL){
 	  assignment->target_parameter->temp_value = assignment->target_parameter->value;
 	}else if(assignment->target_compartment != NULL){
+	  //new code
+	  for(j=0; j<assignment->target_compartment->num_of_including_species; j++){
+	    if(assignment->target_compartment->including_species[j]->is_concentration){
+	      assignment->target_compartment->including_species[j]->value = assignment->target_compartment->including_species[j]->value*assignment->target_compartment->temp_value/assignment->target_compartment->value;
+	      assignment->target_compartment->including_species[j]->temp_value = assignment->target_compartment->including_species[j]->value;
+	    }
+	  }
+	  //
 	  assignment->target_compartment->temp_value = assignment->target_compartment->value;
 	}else if(assignment->target_species_reference != NULL){
 	  assignment->target_species_reference->temp_value = assignment->target_species_reference->value;
diff -ruBb SBML_simulator_1203/src/calc_k.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_k.c
--- SBML_simulator_1203/src/calc_k.c	2011-12-03 21:35:46.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_k.c	2012-03-06 01:49:58.000000000 +0900
@@ -106,8 +106,22 @@
       //compartment
       for(i=0; i<comp_num; i++){
 	if(comp[i]->depending_rule != NULL && comp[i]->depending_rule->is_assignment){
+	  //new code
+	  for(j=0; j<comp[i]->num_of_including_species; j++){
+	    if(comp[i]->including_species[j]->is_concentration){
+	      comp[i]->including_species[j]->temp_value = comp[i]->including_species[j]->temp_value*comp[i]->temp_value/comp[i]->k[step];
+	    }
+	  }
+	  //
 	  comp[i]->temp_value = comp[i]->k[step];
 	}else{
+	  //new code
+	  for(j=0; j<comp[i]->num_of_including_species; j++){
+	    if(comp[i]->including_species[j]->is_concentration){
+	      comp[i]->including_species[j]->temp_value = comp[i]->including_species[j]->temp_value*comp[i]->temp_value/(comp[i]->value + comp[i]->k[step]*dt*rk_cef[step]);
+	    }
+	  }
+	  //
 	  comp[i]->temp_value = comp[i]->value + comp[i]->k[step]*dt*rk_cef[step];
 	}
       }
diff -ruBb SBML_simulator_1203/src/calc_temp_value.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_temp_value.c
--- SBML_simulator_1203/src/calc_temp_value.c	2011-12-03 13:14:47.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/calc_temp_value.c	2012-03-06 01:48:02.000000000 +0900
@@ -8,7 +8,7 @@
 #include "header.h"
 
 void calc_temp_value(mySpecies *sp[], int sp_num, myParameter *param[], int param_num, myCompartment *comp[], int comp_num, mySpeciesReference *spr[], int spr_num, int cycle, double dt, int use_rk){
-  int i;
+  int i, j;
   
   if(use_rk){
     //species
@@ -34,6 +34,13 @@
       }else{
 	comp[i]->temp_value = comp[i]->value + (comp[i]->k[0]+2*comp[i]->k[1]+2*comp[i]->k[2]+comp[i]->k[3])/6*dt;
       }
+      //new code
+      for(j=0; j<comp[i]->num_of_including_species; j++){
+	if(comp[i]->including_species[j]->is_concentration){
+	  comp[i]->including_species[j]->temp_value = comp[i]->including_species[j]->temp_value*comp[i]->value/comp[i]->temp_value;
+	}
+      }
+      //
     }
     //species reference
     for(i=0; i<spr_num; i++){
@@ -67,6 +74,13 @@
       }else{
 	comp[i]->temp_value = comp[i]->value + comp[i]->k[0]*dt;
       }
+      //new code
+      for(j=0; j<comp[i]->num_of_including_species; j++){
+	if(comp[i]->including_species[j]->is_concentration){
+	  comp[i]->including_species[j]->temp_value = comp[i]->including_species[j]->temp_value*comp[i]->value/comp[i]->temp_value;
+	}
+      }
+      //
     }
     //species reference
     for(i=0; i<spr_num; i++){
diff -ruBb SBML_simulator_1203/src/create_mySBML_objects.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/create_mySBML_objects.c
--- SBML_simulator_1203/src/create_mySBML_objects.c	2011-12-03 13:14:47.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/create_mySBML_objects.c	2012-03-05 23:28:06.000000000 +0900
@@ -67,8 +67,8 @@
     mySp[i]->has_only_substance_units = Species_getHasOnlySubstanceUnits(sp);
     mySp[i]->temp_value = mySp[i]->value;
     mySp[i]->locating_compartment = NULL;
-    mySp[i]->is_independent = 1;
-    mySp[i]->depending_event_is_fired = 0;
+    //mySp[i]->is_independent = 1;
+    //mySp[i]->depending_event_is_fired = 0;
     mySp[i]->delay_val = NULL;
     mySp[i]->depending_rule = NULL;
     mySp[i]->k[0] = 0;
@@ -133,6 +133,7 @@
     myComp[i]->prev_k[0] = 0;
     myComp[i]->prev_k[1] = 0;
     myComp[i]->prev_k[2] = 0;
+    myComp[i]->num_of_including_species = 0;
   }
 
   //determin species locating compartment
@@ -140,6 +141,8 @@
     for(j=0; j<num_of_compartments; j++){
       if(strcmp(Species_getCompartment(mySp[i]->origin), Compartment_getId(myComp[j]->origin)) == 0){
 	mySp[i]->locating_compartment = myComp[j];
+	myComp[j]->including_species[myComp[j]->num_of_including_species] = mySp[i];
+	myComp[j]->num_of_including_species++;
       }
     }
   }
@@ -143,14 +146,15 @@
       }
     }
   }
+
   //determin species initial amount (for independent species)
-  for(i=0; i<num_of_species; i++){
-    if(mySp[i]->is_amount){
-      mySp[i]->initial_amount = mySp[i]->value;
-    }else{
-      mySp[i]->initial_amount = mySp[i]->value*mySp[i]->locating_compartment->value;
-    }
-  }
+/*   for(i=0; i<num_of_species; i++){ */
+/*     if(mySp[i]->is_amount){ */
+/*       mySp[i]->initial_amount = mySp[i]->value; */
+/*     }else{ */
+/*       mySp[i]->initial_amount = mySp[i]->value*mySp[i]->locating_compartment->value; */
+/*     } */
+/*   } */
 
   //create myReaction & mySpeciseReference without equation
   Reaction_t *re;
@@ -616,19 +620,19 @@
   }
   
   //species independency check
-  for(i=0; i<num_of_reactions; i++){
-    for(j=0; j<myRe[i]->num_of_products; j++){
-      myRe[i]->products[j]->mySp->is_independent = 0;
-    }
-    for(j=0; j<myRe[i]->num_of_reactants; j++){
-      myRe[i]->reactants[j]->mySp->is_independent = 0;
-    }
-  }
-  for(i=0; i<num_of_rules; i++){
-    if(myRu[i]->target_species != NULL){
-      myRu[i]->target_species->is_independent = 0;
-    }
-  }
+/*   for(i=0; i<num_of_reactions; i++){ */
+/*     for(j=0; j<myRe[i]->num_of_products; j++){ */
+/*       myRe[i]->products[j]->mySp->is_independent = 0; */
+/*     } */
+/*     for(j=0; j<myRe[i]->num_of_reactants; j++){ */
+/*       myRe[i]->reactants[j]->mySp->is_independent = 0; */
+/*     } */
+/*   } */
+/*   for(i=0; i<num_of_rules; i++){ */
+/*     if(myRu[i]->target_species != NULL){ */
+/*       myRu[i]->target_species->is_independent = 0; */
+/*     } */
+/*   } */
   
   //create myEvents & myEventAssignments
   Event_t *event;
diff -ruBb SBML_simulator_1203/src/header.h /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/header.h
--- SBML_simulator_1203/src/header.h	2011-12-03 13:26:55.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/header.h	2012-03-05 23:16:15.000000000 +0900
@@ -9,6 +9,7 @@
 #define MAX_IDENTICAL_EVENTS 256
 #define MAX_EVENTASSIGNMENTS 256
 #define MAX_TIME_VARIANT_ASSIGNMENT 1024
+#define MAX_INCLUDING_SPECIES 256
 
 //structures for efficient simulation
 typedef struct _equation equation;
@@ -48,9 +49,9 @@
   int is_concentration;
   int has_only_substance_units;
   myCompartment *locating_compartment;
-  int is_independent;
-  int depending_event_is_fired;
-  double initial_amount; //for rule and reaction independent species
+  //int is_independent;
+  //int depending_event_is_fired;
+  //double initial_amount; //for rule and reaction independent species
   double k[4]; //for runge kutta
   double **delay_val;
   myRule *depending_rule;
@@ -91,6 +92,8 @@
   myRule *depending_rule;
   double prev_val[3]; //previous values for multistep solution
   double prev_k[3]; //previous values for multistep solution
+  mySpecies *including_species[MAX_INCLUDING_SPECIES];
+  int num_of_including_species;
 };
 
 struct _myReaction{
diff -ruBb SBML_simulator_1203/src/simulate_explicit.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/simulate_explicit.c
--- SBML_simulator_1203/src/simulate_explicit.c	2012-02-26 17:54:17.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/simulate_explicit.c	2012-03-09 16:17:17.000000000 +0900
@@ -223,6 +223,13 @@
 	algEq->alg_target_parameter[i]->target_parameter->temp_value = constant_vector[algEq->alg_target_parameter[i]->order];
       }    
       for(i=0; i<algEq->num_of_alg_target_comp; i++){
+	//new code
+	for(j=0; j<algEq->alg_target_compartment[i]->target_compartment->num_of_including_species; j++){
+	  if(algEq->alg_target_compartment[i]->target_compartment->including_species[j]->is_concentration){
+	    algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value = algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value*algEq->alg_target_compartment[i]->target_compartment->temp_value/constant_vector[algEq->alg_target_compartment[i]->order];
+	  }
+	}
+	//
 	algEq->alg_target_compartment[i]->target_compartment->temp_value = constant_vector[algEq->alg_target_compartment[i]->order];
       }    
     }else{
@@ -233,6 +240,13 @@
 	algEq->target_parameter->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
       }
       if(algEq->target_compartment != NULL){
+	//new code
+	for(i=0; i<algEq->target_compartment->num_of_including_species; i++){
+	  if(algEq->target_compartment->including_species[i]->is_concentration){
+	    algEq->target_compartment->including_species[i]->temp_value = algEq->target_compartment->including_species[i]->temp_value*algEq->target_compartment->temp_value/(-calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0));
+	  }
+	}
+	//
 	algEq->target_compartment->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
       }
     }
@@ -241,13 +255,13 @@
   }
   
   //determin species initial amount (for independent species)
-  for(i=0; i<num_of_species; i++){
-    if(sp[i]->is_amount){
-      sp[i]->initial_amount = sp[i]->value;
-    }else{
-      sp[i]->initial_amount = sp[i]->value*sp[i]->locating_compartment->value;
-    }
-  }
+/*   for(i=0; i<num_of_species; i++){ */
+/*     if(sp[i]->is_amount){ */
+/*       sp[i]->initial_amount = sp[i]->value; */
+/*     }else{ */
+/*       sp[i]->initial_amount = sp[i]->value*sp[i]->locating_compartment->value; */
+/*     } */
+/*   } */
   
   //initialize delay_val
   initialize_delay_val(sp, num_of_species, param, num_of_parameters, comp, num_of_compartments, re, num_of_reactions, sim_time, dt, 1);
@@ -425,13 +439,13 @@
     }
 
     //calc independent species value
-    for(i=0; i<num_of_species; i++){
-      if(sp[i]->is_concentration && sp[i]->is_independent
-	 && !sp[i]->depending_event_is_fired){
-	sp[i]->temp_value = sp[i]->initial_amount/sp[i]->locating_compartment->temp_value;
-	sp[i]->value = sp[i]->temp_value;
-      }
-    }
+/*     for(i=0; i<num_of_species; i++){ */
+/*       if(sp[i]->is_concentration && sp[i]->is_independent */
+/* 	 && !sp[i]->depending_event_is_fired){ */
+/* 	sp[i]->temp_value = sp[i]->initial_amount/sp[i]->locating_compartment->temp_value; */
+/* 	sp[i]->value = sp[i]->temp_value; */
+/*       } */
+/*     } */
 
     //calc temp value algebraic by algebraic
     if(algEq != NULL){
@@ -462,6 +476,13 @@
 	  algEq->alg_target_parameter[i]->target_parameter->temp_value = constant_vector[algEq->alg_target_parameter[i]->order];
 	}    
 	for(i=0; i<algEq->num_of_alg_target_comp; i++){
+	  //new code
+	  for(j=0; j<algEq->alg_target_compartment[i]->target_compartment->num_of_including_species; j++){
+	    if(algEq->alg_target_compartment[i]->target_compartment->including_species[j]->is_concentration){
+	      algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value = algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value*algEq->alg_target_compartment[i]->target_compartment->temp_value/constant_vector[algEq->alg_target_compartment[i]->order];
+	    }
+	  }
+	  //
 	  algEq->alg_target_compartment[i]->target_compartment->temp_value = constant_vector[algEq->alg_target_compartment[i]->order];
 	}    
       }else{
@@ -472,6 +493,13 @@
 	  algEq->target_parameter->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
 	}
 	if(algEq->target_compartment != NULL){
+	  //new code
+	  for(i=0; i<algEq->target_compartment->num_of_including_species; i++){
+	    if(algEq->target_compartment->including_species[i]->is_concentration){
+	      algEq->target_compartment->including_species[i]->temp_value = algEq->target_compartment->including_species[i]->temp_value*algEq->target_compartment->temp_value/(-calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0));
+	    }
+	  }
+	  //
 	  algEq->target_compartment->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
 	}
       }
diff -ruBb SBML_simulator_1203/src/simulate_implicit.c /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/simulate_implicit.c
--- SBML_simulator_1203/src/simulate_implicit.c	2012-02-26 17:54:36.000000000 +0900
+++ /Users/takizawa/neuro_sim/SBML_simulator/SBML_simulator_0305_2012/src/simulate_implicit.c	2012-03-09 16:21:58.000000000 +0900
@@ -242,6 +242,13 @@
 	algEq->alg_target_parameter[i]->target_parameter->temp_value = constant_vector[algEq->alg_target_parameter[i]->order];
       }    
       for(i=0; i<algEq->num_of_alg_target_comp; i++){
+	//new code
+	for(j=0; j<algEq->alg_target_compartment[i]->target_compartment->num_of_including_species; j++){
+	  if(algEq->alg_target_compartment[i]->target_compartment->including_species[j]->is_concentration){
+	    algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value = algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value*algEq->alg_target_compartment[i]->target_compartment->temp_value/constant_vector[algEq->alg_target_compartment[i]->order];
+	  }
+	}
+	//
 	algEq->alg_target_compartment[i]->target_compartment->temp_value = constant_vector[algEq->alg_target_compartment[i]->order];
       }    
     }else{
@@ -252,6 +259,13 @@
 	algEq->target_parameter->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
       }
       if(algEq->target_compartment != NULL){
+	//new code
+	for(i=0; i<algEq->target_compartment->num_of_including_species; i++){
+	  if(algEq->target_compartment->including_species[i]->is_concentration){
+	    algEq->target_compartment->including_species[i]->temp_value = algEq->target_compartment->including_species[i]->temp_value*algEq->target_compartment->temp_value/(-calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0));
+	  }
+	}
+	//
 	algEq->target_compartment->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
       }
     }
@@ -260,13 +274,13 @@
   }
 
   //determin species initial amount (for independent species)
-  for(i=0; i<num_of_species; i++){
-    if(sp[i]->is_amount){
-      sp[i]->initial_amount = sp[i]->value;
-    }else{
-      sp[i]->initial_amount = sp[i]->value*sp[i]->locating_compartment->value;
-    }
-  }
+/*   for(i=0; i<num_of_species; i++){ */
+/*     if(sp[i]->is_amount){ */
+/*       sp[i]->initial_amount = sp[i]->value; */
+/*     }else{ */
+/*       sp[i]->initial_amount = sp[i]->value*sp[i]->locating_compartment->value; */
+/*     } */
+/*   } */
   
   //initialize delay_val
   initialize_delay_val(sp, num_of_species, param, num_of_parameters, comp, num_of_compartments, re, num_of_reactions, sim_time, dt, 1);
@@ -565,13 +579,13 @@
     }
     
     //calc independent species value
-    for(i=0; i<num_of_species; i++){
-      if(sp[i]->is_concentration && sp[i]->is_independent
-	 && !sp[i]->depending_event_is_fired){
-	sp[i]->temp_value = sp[i]->initial_amount/sp[i]->locating_compartment->temp_value;
-	sp[i]->value = sp[i]->temp_value;
-      }
-    }     
+/*     for(i=0; i<num_of_species; i++){ */
+/*       if(sp[i]->is_concentration && sp[i]->is_independent */
+/* 	 && !sp[i]->depending_event_is_fired){ */
+/* 	sp[i]->temp_value = sp[i]->initial_amount/sp[i]->locating_compartment->temp_value; */
+/* 	sp[i]->value = sp[i]->temp_value; */
+/*       } */
+/*     }      */
     
     //calc temp value algebraic by algebraic
     if(algEq != NULL){
@@ -602,6 +616,13 @@
 	  algEq->alg_target_parameter[i]->target_parameter->temp_value = constant_vector[algEq->alg_target_parameter[i]->order];
 	}    
 	for(i=0; i<algEq->num_of_alg_target_comp; i++){
+	  //new code
+	  for(j=0; j<algEq->alg_target_compartment[i]->target_compartment->num_of_including_species; j++){
+	    if(algEq->alg_target_compartment[i]->target_compartment->including_species[j]->is_concentration){
+	      algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value = algEq->alg_target_compartment[i]->target_compartment->including_species[j]->temp_value*algEq->alg_target_compartment[i]->target_compartment->temp_value/constant_vector[algEq->alg_target_compartment[i]->order];
+	    }
+	  }
+	  //
 	  algEq->alg_target_compartment[i]->target_compartment->temp_value = constant_vector[algEq->alg_target_compartment[i]->order];
 	}    
       }else{
@@ -612,6 +633,13 @@
 	  algEq->target_parameter->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
 	}
 	if(algEq->target_compartment != NULL){
+	  //new code
+	  for(i=0; i<algEq->target_compartment->num_of_including_species; i++){
+	    if(algEq->target_compartment->including_species[i]->is_concentration){
+	      algEq->target_compartment->including_species[i]->temp_value = algEq->target_compartment->including_species[i]->temp_value*algEq->target_compartment->temp_value/(-calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0));
+	    }
+	  }
+	  //
 	  algEq->target_compartment->temp_value = -calc(algEq->constant, dt, cycle, &reverse_time, 0)/calc(algEq->coefficient, dt, cycle, &reverse_time, 0);
 	}
       }
